// router.post('/signup', (req, res, next) => {
//     User.findOne({username: req.body.username})
//     .then(user => {
//         if (user) {
//             const err = new Error(`User ${req.body.username} already exists!`);
//             err.status = 403;
//             return next(err);
//         } else {
//             User.create({
//                 username: req.body.username,
//                 password: req.body.password})
//             .then(user => {
//                 res.statusCode = 200;
//                 res.setHeader('Content-Type', 'application/json');
//                 res.json({status: 'Registration Successful!', user: user});
//             })
//             .catch(err => next(err));
//         }
//     })
//     .catch(err => next(err));
// });

// router.post('/login', (req, res, next) => {
//     if(!req.session.user) {
//         const authHeader = req.headers.authorization;

//         if (!authHeader) {
//             const err = new Error('You are not authenticated!');
//             res.setHeader('WWW-Authenticate', 'Basic');
//             err.status = 401;
//             return next(err);
//         }
      
//         const auth = Buffer.from(authHeader.split(' ')[1], 'base64').toString().split(':');
//         const username = auth[0];
//         const password = auth[1];
      
//         User.findOne({username: username})
//         .then(user => {
//             if (!user) {
//                 const err = new Error(`User ${username} does not exist!`);
//                 err.status = 401;
//                 return next(err);
//             } else if (user.password !== password) {
//                 const err = new Error('Your password is incorrect!');
//                 err.status = 401;
//                 return next(err);
//             } else if (user.username === username && user.password === password) {
//                 req.session.user = 'authenticated';
//                 res.statusCode = 200;
//                 res.setHeader('Content-Type', 'text/plain');
//                 res.end('You are authenticated!')
//             }
//         })
//         .catch(err => next(err));
//     } else {
//         res.statusCode = 200;
//         res.setHeader('Content-Type', 'text/plain');
//         res.end('You are already authenticated!');
//     }
// });


//authentication
function auth(req, res, next) {
  //console.log(req.session);
  // this part is now handled by users.js
  // if (!req.session.user) { //req.signedCookies.user 
  //     const authHeader = req.headers.authorization;
  //     if (!authHeader) {
  //         const err = new Error('You are not authenticated!');
  //         res.setHeader('WWW-Authenticate', 'Basic');
  //         err.status = 401;
  //         return next(err);
  //     }

  //     const auth = Buffer.from(authHeader.split(' ')[1], 'base64').toString().split(':');
  //     const user = auth[0];
  //     const pass = auth[1];
  //     if (user === 'admin' && pass === 'password') {
  //         //res.cookie('user', 'admin', {signed: true}); //handles creation of cookies
  //         req.session.user = 'admin';
  //         return next(); // authorized
  //     } else {
  //         const err = new Error('You are not authenticated!');
  //         res.setHeader('WWW-Authenticate', 'Basic');
  //         err.status = 401;
  //         return next(err);
  //     }
  // } else {
  //     if (req.session.user === 'admin') { //req.signedCookies.user
  //         return next();
  //     } else {
  //         const err = new Error('You are not authenticated!');
  //         err.status = 401;
  //         return next(err);
  //     }
  // }

  //   if (!req.session.user) {
  //     const err = new Error('You are not authenticated!');
  //     err.status = 401;
  //     return next(err);
  //   } else {
  //     if (req.session.user === 'authenticated') {
  //         return next();
  //     } else {
  //         const err = new Error('You are not authenticated!');
  //         err.status = 401;
  //         return next(err);
  //   }
  // }

    console.log(req.user);

    if (!req.user) {
        const err = new Error('You are not authenticated!');                    
        err.status = 401;
        return next(err);
    } else {
        return next();
    }
}

app.use(auth);